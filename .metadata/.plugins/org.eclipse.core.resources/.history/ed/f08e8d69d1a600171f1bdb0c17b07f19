package anticheat.checks.combat;

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.bukkit.entity.Player;
import org.bukkit.event.Event;
import org.bukkit.event.EventHandler;
import org.bukkit.event.player.PlayerQuitEvent;

import com.comphenix.protocol.wrappers.EnumWrappers;

import anticheat.Daedalus;
import anticheat.detections.Checks;
import anticheat.detections.ChecksType;
import anticheat.packets.events.PacketUseEntityEvent;
import anticheat.utils.TimerUtils;

public class KillAuraA extends Checks {
	public static Map<UUID, Long> LastMS;
    public static Map<UUID, List<Long>> Clicks;
    public static Map<UUID, Map.Entry<Integer, Long>> ClickTicks;

    public KillAuraA(Daedalus Daedalus) {
    	super("Killaura", "KillAura", ChecksType.COMBAT, 4, Daedalus.getAC(), true);
        this.LastMS = new HashMap<UUID, Long>();
        this.Clicks = new HashMap<UUID, List<Long>>();
        this.ClickTicks = new HashMap<UUID, Map.Entry<Integer, Long>>();
    }

    @EventHandler
    public void onLog(PlayerQuitEvent e) {
    	Player p = e.getPlayer();
    	UUID uuid = p.getUniqueId();
    	
    	if(LastMS.containsKey(uuid)) {
    		LastMS.remove(uuid);
    	}
    	if(Clicks.containsKey(uuid)) {
    		Clicks.remove(uuid);
    	}
    	if(ClickTicks.containsKey(uuid)) {
    		ClickTicks.remove(uuid);
    	}
    }
    
    @Override
    protected void onEvent(Event event) {
    	if(event instanceof PacketUseEntityEvent) {
    		PacketUseEntityEvent e = (PacketUseEntityEvent) event;
    		 if (e.getAction() != EnumWrappers.EntityUseAction.ATTACK) {
    	            return;
    	        }
    	        if (!((e.getAttacked()) instanceof Player)) {
    	            return;
    	        }
    	        final Player damager = e.getAttacker();
    		     if(damager.hasPermission("daedalus.bypass")) {
    		         return;
    		     }
    	        int Count = 0;
    	        long Time = System.currentTimeMillis();
    	        if (this.ClickTicks.containsKey(damager.getUniqueId())) {
    	            Count = this.ClickTicks.get(damager.getUniqueId()).getKey();
    	            Time = this.ClickTicks.get(damager.getUniqueId()).getValue();
    	        }
    	        if (this.LastMS.containsKey(damager.getUniqueId())) {
    	            final long MS = TimerUtils.nowlong() - this.LastMS.get(damager.getUniqueId());
    	            if (MS > 500L || MS < 5L) {
    	                this.LastMS.put(damager.getUniqueId(), TimerUtils.nowlong());
    	                return;
    	            }
    	            if (this.Clicks.containsKey(damager.getUniqueId())) {
    	                final List<Long> Clicks = this.Clicks.get(damager.getUniqueId());
    	                if (Clicks.size() == 10) {
    	                    this.Clicks.remove(damager.getUniqueId());
    	                    Collections.sort(Clicks);
    	                    final long Range = Clicks.get(Clicks.size() - 1) - Clicks.get(0);
    	                    if (Range < 30L) {
    	                        ++Count;
    	                        Time = System.currentTimeMillis();
    	                    }
    	                }
    	                else {
    	                    Clicks.add(MS);
    	                    this.Clicks.put(damager.getUniqueId(), Clicks);
    	                }
    	            }
    	            else {
    	                final List<Long> Clicks = new ArrayList<Long>();
    	                Clicks.add(MS);
    	                this.Clicks.put(damager.getUniqueId(), Clicks);
    	            }
    	        }
    	        if (this.ClickTicks.containsKey(damager.getUniqueId()) && UtilTime.elapsed(Time, 5000L)) {
    	            Count = 0;
    	            Time = TimerUtils.nowlong();
    	        }
    	        if ((Count > 0 && Ping. < 100) || (Count > 2 && this.getDaedalus().getLag().getPing(damager) < 200)) {
    	            Count = 0;
    	            this.Alert(damager, "(ClickPattern)");
    	            ClickTicks.remove(damager.getUniqueId());
    	        } else if(this.getDaedalus().getLag().getPing(damager) > 250) {
    	        	this.dumplog(damager, "Would set off Killaura (Click Pattern) but latency is too high!");
    	        }
    	        this.LastMS.put(damager.getUniqueId(), UtilTime.nowlong());
    	        this.ClickTicks.put(damager.getUniqueId(), new AbstractMap.SimpleEntry<Integer, Long>(Count, Time));
    	}
    }
}